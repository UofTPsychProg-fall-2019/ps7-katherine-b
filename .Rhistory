bootstraps = 0
#sample is the number of means generated
samples = 1000
#sample size
n = 30
#this will give me 0.025 on either end of the distribtuion
alphaValue = .05
#to create null distributions
relationship = 0
# Number of samples to collect so we get 1000 means
num.samp   <- 1000
# Size of each sample
samp.size  <- 30
# Create an empty vector array
samp.mean  <- vector(length = num.samp)
for (i in 1:num.samp){
samp.mean[i] <- mean(rbeta(samp.size,20,20,ncp=0)*60)
10/sqrt(10)
sem_10 = 10/sqrt(10)
library(tidyverse)
sem_10 = 10/ sqrt(10)
sem_100 = 10/sqrt(100)
sem_1000 = 10/sqrt(1000)
z_10 = ((37.4-30)/sem_10)
z_100 = ((37.4-30))/sem_100)
z_100 = ((37.4-30)/sem_100)
z_1000 =((37.4-30)/sem_1000)
means=vector(made='numeric')
libraray(magrittr)
library(magrittr)
for (i in 1:1000) {
sample_boot = rnorm(n=30, mean=100,sd=10)
mean_boot=mean(sample_boot)
means = append(mean_boot, means)
}
for (i in 1:1000) {
sample_boot = rnorm(n=30, mean=100,sd=10)
mean_boot=mean(sample_boot)
mean = append(mean_boot, means)
}
means=vector(mode='numeric')
library(magrittr)
for (i in 1:1000) {
sample_boot = rnorm(n=30, mean=100,sd=10)
mean_boot=mean(sample_boot)
means = append(mean_boot, means)
sort(means)[25]
sort(means)[975]
means=vector(mode='numeric')
for (i in 1:1000) {
sample_boot = rnorm(n=30, mean=100,sd=10)
mean_boot=mean(sample_boot)
means = append(mean_boot, means)
}
sort(means)[25]
sort(means)[975]
library(tidyverse)
library(tidyverse)
means
means %>%
data.frame() %>%
ggplot(aes(x = .))
means %>%
data.frame() %>%
ggplot(aes(x = .)) +
geom_histogram()
means %>%
data.frame() %>%
ggplot(aes(x = .)) +
geom_histogram(binwidth =.5, fill = 'white', colour = 'black') +
labs(x = 'bootstrapped mean')
install.packages(pivottabler)
install.packages("pivottabler")
library(pivottabler)
qhpvt(bhmtrains, "TOC", "TrainCategory", "n()")
?bhmtrains
pt <- PivotTable$new()
pt$addData(bhmtrains) #adding dataset
pt$addColumnDataGroups("TrainCategory") #adding column
pt$addRowDataGroups("TOC") #adding rows
pt$defineCalculation(calculationName="TotalTrains", summariseExpression="n()")
pt$renderPivot()
pt <- PivotTable$new()
pt$addData(bhmtrains)
pt$addColumnDataGroups("TrainCategory")
pt$addColumnDataGroups("PowerType")    #    << **** CODE CHANGE **** <<
pt$addRowDataGroups("TOC")
pt$defineCalculation(calculationName="TotalTrains", summariseExpression="n()")
pt$renderPivot()
pt <- PivotTable$new()
pt$addData(bhmtrains)
pt$addColumnDataGroups("TrainCategory")
pt$addColumnDataGroups("PowerType", expandExistingTotals=TRUE) # << ** CODE CHANGE ** <<
pt$addRowDataGroups("TOC")
pt$defineCalculation(calculationName="TotalTrains", summariseExpression="n()")
pt$renderPivot()
pt <- PivotTable$new()
pt$addData(bhmtrains)
pt$addColumnDataGroups("TrainCategory")
pt$addRowDataGroups("TOC")
pt$addRowDataGroups("PowerType")    #    << **** CODE CHANGE **** <<
pt$defineCalculation(calculationName="TotalTrains", summariseExpression="n()")
pt$renderPivot()
pt <- PivotTable$new()
pt$addData(bhmtrains)
pt$addColumnDataGroups("TrainCategory")
pt$addRowDataGroups("TOC")
pt$addRowDataGroups("PowerType")
pt$addRowDataGroups("SchedSpeedMPH")    #    << **** CODE CHANGE **** <<
pt$defineCalculation(calculationName="TotalTrains", summariseExpression="n()")
pt$renderPivot()
pt <- PivotTable$new()
pt$addData(bhmtrains)
pt$addColumnDataGroups("TrainCategory")
pt$addRowDataGroups("TOC", totalCaption="Grand Total")    #    << **** CODE CHANGE **** <<
pt$addRowDataGroups("PowerType")
pt$addRowDataGroups("SchedSpeedMPH", addTotal=FALSE)      #    << **** CODE CHANGE **** <<
pt$defineCalculation(calculationName="TotalTrains", summariseExpression="n()")
pt$renderPivot()
qhpvt(bhmtrains, c("=", "TOC"), c("TrainCategory", "PowerType"),
c("Number of Trains"="n()", "Maximum Speed"="max(SchedSpeedMPH, na.rm=TRUE)"))
qhpvt(bhmtrains, c("=", "TOC"), c("TrainCategory", "PowerType"),
c("Number of Trains"="n()", "Maximum Speed"="max(SchedSpeedMPH, na.rm=TRUE)"))
qhpvt(bhmtrains, "TOC", "TrainCategory", "mean(SchedSpeedMPH, na.rm=TRUE)", format="%.0f") #format is number if decimal places
library(gapminder)
library(data.table)
install.packages("data.table")
library(data.table)
# make a data.table object
df <- copy(gapminder) #assigning it to a dataframe
dt <- setDT(df) #assigning it to a datclass table
View(dt)
View(dt)
# basic data.table syntax
dt[, mean(lifeExp)] # get mean of lifeExp column for all rows(comma means use all available rows)
dt[continent == 'Asia', mean(lifeExp)] # get same mean, but only for rows where continent is asia
dt[, mean(lifeExp), by = continent] # get same mean, separately for each continent
dt[, mean(lifeExp), by = continent] %>%
ggplot +
aes(x = continent, y = V1) +
geom_point()
# now add tidyverse pipes. so can use datatable and tidyverse
library(tidyverse)
dt[, mean(lifeExp), by = continent] %>%
ggplot +
aes(x = continent, y = V1) +
geom_point()
6*6
6/6
df = c(1,2,3,4,5,6,7)
df = c(1,2,3,4,5,6,7)
mean = mean(df)
standard deviation = deviance(df)
standard deviation = sd(df)
standard-deviation = sd(df)
standard_deviation = sd(df)
variance=variance(df)
variance=var(df)
sleep = c(1,2,3,4,5,6,7)
time=c(4,6,2,8,4,5,8)
df$time=c(4,6,2,8,4,5,8)
df$sleep = c(1,2,3,4,5,6,7)
View(df)
View(df)
View(df)
df$sleep = (1,2,3,4,5,6,7)
RStudio.Version()
citation()
# libraries:
library(ggplot2)
library(gganimate)
# Make 2 basic states and concatenate them:
a <- data.frame(group=c("A","B","C"), values=c(3,2,4), frame=rep('a',3))
b <- data.frame(group=c("A","B","C"), values=c(5,3,7), frame=rep('b',3))
data <- rbind(a,b)
# Basic barplot:
ggplot(a, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity')
# Make a ggplot, but add frame=year: one image per year
ggplot(data, aes(x=group, y=values, fill=group)) +
geom_bar(stat='identity') +
theme_bw() +
# gganimate specific bits:
transition_states(
frame,
transition_length = 2,
state_length = 1
) +
ease_aes('sine-in-out')
Data <- read.csv (“example data.csv”) # will read in the csv that will be laid out as described above
setwd("~/Desktop/Grad School Classes/PSY1210-Programming/ps7-katherine-b")
Data <- read.csv (“example data.csv”) # will read in the csv that will be laid out as described above
library(tidyverse)
library(readxl)
Data <- read.csv (“example data.csv”) # will read in the csv that will be laid out as described above
Data <- read.csv (“example data.xlsx”) # will read in the csv that will be laid out as described above
Data <- read_excel (“example data.xlsx”) # will read in the csv that will be laid out as described above
Data <- read_excel ("example_data.xlsx") # will read in the csv that will be laid out as described above
setwd("~/Desktop/Grad School Classes/PSY1210-Programming/ps7-katherine-b")
Data <- read_excel ("example_data.xlsx") # will read in the csv that will be laid out as described above
Data <- read_excel ("example_data.xlsx") # will read in the csv that will be laid out as described above
View(Data)
Data <- read_excel ("example_data.xlsx") # will read in the csv that will be laid out as described above
View(Data)
Data <- read_excel ("example_data.xlsx") # will read in the csv that will be laid out as described above
View(Data)
Data.Recode <- within (Data, {
Age <- ifelse(AgeR == "Younger" , 1, -1) #will recode my younger and older as 1s and -1s respectively
Task_Type <- ifelse(TaskTypeR == "Dual" , 1, 0, -1) #will recode my single (LO, DO) and dual as 1s, 0s, and -1s  respectively
Listening_Difficulty <- ifelse(ListeningDifficultyR=="HSNR" , 1 -1) #will recode my two different listening task difficulty types HSNR and LSNR as 1s and -1s respectively
)}
Data.Recode <- within (Data, {
Data.Recode <- within (Data, {
Age <- ifelse(AgeR == "Younger" , 1, -1) #will recode my younger and older as 1s and -1s respectively
Task_Type <- ifelse(TaskTypeR == "Dual" , 1, 0, -1) #will recode my single (LO, DO) and dual as 1s, 0s, and -1s  respectively
Listening_Difficulty <- ifelse(ListeningDifficultyR=="HSNR" , 1 -1 #will recode my two different listening task difficulty types HSNR and LSNR as 1s and -1s respectively
)}
Data.Recode <- within (Data, {
Age <- ifelse(AgeR == "Younger" , 1, -1) #will recode my younger and older as 1s and -1s respectively
Task_Type <- ifelse(TaskTypeR == "Dual" , 1, 0, -1) #will recode my single (LO, DO) and dual as 1s, 0s, and -1s  respectively
Listening_Difficulty <- ifelse(ListeningDifficultyR=="HSNR" , 1 -1 #will recode my two different listening task difficulty types HSNR and LSNR as 1s and -1s respectively
))}
Data.Recode <- within (Data, {
Age <- ifelse(AgeR == "Younger" , 1, -1) #will recode my younger and older as 1s and -1s respectively
Task_Type <- ifelse(TaskTypeR == "Dual" , 1, 0, -1) #will recode my single (LO, DO) and dual as 1s, 0s, and -1s  respectively
Listening_Difficulty <- ifelse(ListeningDifficultyR=="HSNR" , 1 -1 #will recode my two different listening task difficulty types HSNR and LSNR as 1s and -1s respectively
}))
Data.Recode <- within (Data, {
Age <- ifelse(AgeR == "Younger" , 1, -1) #will recode my younger and older as 1s and -1s respectively
Task_Type <- ifelse(TaskTypeR == "Dual" , 1, 0, -1) #will recode my single (LO, DO) and dual as 1s, 0s, and -1s  respectively
Listening_Difficulty <- ifelse(ListeningDifficultyR=="HSNR" , 1 -1) #will recode my two different listening task difficulty types HSNR and LSNR as 1s and -1s respectively
})
Data.Recode <- within (Data, {
Age <- ifelse(Age== "Younger" , 1, -1) #will recode my younger and older as 1s and -1s respectively
Task_Type <- ifelse(Task_Type== "Dual" , 1, 0, -1) #will recode my single (LO, DO) and dual as 1s, 0s, and -1s  respectively
Listening_Difficulty <- ifelse(Listening_Difficulty=="HSNR" , 1 -1) #will recode my two different listening task difficulty types HSNR and LSNR as 1s and -1s respectively
})
Data.Recode <- within (Data, {
Age <- ifelse(Age== "Younger" , 1, -1) #will recode my younger and older as 1s and -1s respectively
Task_Type <- ifelse(Task_Type== "Dual" , 1,-1) #will recode my single (LO, DO) and dual as 1s, 0s, and -1s  respectively
Listening_Difficulty <- ifelse(Listening_Difficulty=="HSNR" , 1 -1) #will recode my two different listening task difficulty types HSNR and LSNR as 1s and -1s respectively
})
Data.Recode <- within (Data, {
Age <- ifelse(Age== "Younger" , 1, -1) #will recode my younger and older as 1s and -1s respectively
Task_Type <- ifelse(Task_Type== "Dual" , 1,-1) #will recode my single (LO, DO) and dual as 1s, 0s, and -1s  respectively
Listening_Difficulty <- ifelse(Listening_Difficulty=="HSNR" , 1, -1) #will recode my two different listening task difficulty types HSNR and LSNR as 1s and -1s respectively
})
View(Data.Recode)
Word.Accuracy.Model <- anova(data = Data.Recode, dv = (Accuracy) , wid=(Subject_Number), within = (Task_TypeR, Listening_DifficultyR), between = (Age_GroupR)))
View(Data)
Word.Accuracy.Model <- anova(data = Data.Recode, dv = (Accuracy) , wid=(Subject_ID), within = (Task_Type, Listening_Difficulty), between = (Age)))
Word.Accuracy.Model <- anova(data = Data.Recode, dv = (Accuracy) , wid=(Subject_ID), within = (Task_Type, Listening_Difficulty), between = (Age))
Word.Accuracy.Model <- anova(data = Data.Recode, dv = (Accuracy), wid=(Subject_ID), within = (Task_Type Listening_Difficulty), between = (Age))
Word.Accuracy.Model <- anova(data = Data.Recode, dv = (Accuracy), wid=(Subject_ID), within = (Task_Type), between = (Age))
Word.Accuracy.Model <- aov(data = Data.Recode, dv = (Accuracy), wid=(Subject_ID), within = (Task_Type), between = (Age))
ANOVA <- lm(Accuracy~Age + Listening_Difficulty, data=Data.Recode)
summary(ANOVA)
ANOVA <- lm(Accuracy~Age + Listening_Difficulty + Task_Type, data=Data.Recode)
summary(ANOVA)
View(Data.Recode)
ANOVA <- lm(Accuracy~Age + Listening_Difficulty + Task_Type, data=Data.Recode) %>% anova()
summary(ANOVA)
View(ANOVA)
Data.Recode %>%
ggplot(aes(x=Age, y=Accuracy)) +
geom_point() +
geom_smooth(methos = "lm", colour = "green") + #adds line of best fit
labs(x = "Age",
y = "Accuracy (%)") +
theme_bw()
Data.Recode %>%
ggplot(aes(x=Age, y=Accuracy)) +
geom_bar() +
geom_smooth(methos = "lm", colour = "green") + #adds line of best fit
labs(x = "Age",
y = "Accuracy (%)") +
theme_bw()
Data.Recode %>%
ggplot(aes(x=Listening_Difficulty, y=Accuracy)) +
geom_point() +
geom_smooth(methos = "lm", colour = "green") + #adds line of best fit
labs(x = "Age",
y = "Accuracy (%)") +
theme_bw()
Data %>%
ggplot(aes(x=Listening_Difficulty, y=Accuracy)) +
geom_point() +
geom_smooth(methos = "lm", colour = "green") + #adds line of best fit
labs(x = "Age",
y = "Accuracy (%)") +
theme_bw()
Data %>%
ggplot(aes(x=Listening_Difficulty, y=Accuracy, stat = "count")) +
geom_bar() +
geom_smooth(methos = "lm", colour = "green") + #adds line of best fit
labs(x = "Age",
y = "Accuracy (%)") +
theme_bw()
?geom_bar
ggplot(Data, aes(Accuracy)) + geom_bar()
Data %>%
ggplot(aes(x=Listening_Difficulty, y=Accuracy, stat = "count")) +
geom_bar()
View(Data)
View(Data.Recode)
